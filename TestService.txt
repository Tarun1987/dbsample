using System;
using System.Collections.Generic;
using System.Configuration;
using System.Diagnostics;
using System.IO;
using System.ServiceProcess;
using System.Timers;
using System.Linq;

namespace MyFirstWindowsService
{
    public partial class TestService : ServiceBase
    {
        private Timer _timer = new Timer();
        private IList<MyProcess> _processNames;
        private string _logPath;
        private string _retryLogFilePrefix = "RetryLogs_";
        private string _errorLogFilePrefix = "ServiceLog_";
        private int _maxRetryCount;
        private int _maxRetryHours;
        public TestService()
        {
            _logPath = string.Format($"{AppDomain.CurrentDomain.BaseDirectory}\\Logs"); ;
            _maxRetryCount = int.Parse(ConfigurationManager.AppSettings["MaxRetryCount"]);
            _maxRetryHours = int.Parse(ConfigurationManager.AppSettings["MaxRetryHours"]);
            InitializeComponent();
            LoadProcesses();
        }

        protected override void OnStart(string[] args)
        {
            WriteToFile("Service is started at " + DateTime.Now);
            _timer.Elapsed += new ElapsedEventHandler(OnElapsedTime);
            _timer.Interval = 5000; //number in miliseconds  
            _timer.Enabled = true;
        }

        protected override void OnStop()
        {
            WriteToFile("Service is stopped at " + DateTime.Now);
        }


        #region private functions here

        private void OnElapsedTime(object source, ElapsedEventArgs e)
        {
            CheckProcessStatus();
        }

        private void LoadProcesses()
        {
            var appNames = ConfigurationManager.AppSettings["AppNames"];
            if (!string.IsNullOrWhiteSpace(appNames))
            {
                _processNames = new List<MyProcess>();
                var list = appNames.Split(new string[] { "||" }, StringSplitOptions.None);
                foreach (var item in list)
                {
                    var app = item.Split('|');
                    var process = new MyProcess { Name = app[0], ExePath = app[1] };
                    _processNames.Add(process);
                }
            }
        }

        private void CheckProcessStatus()
        {
            foreach (var mp in _processNames)
            {

                // Patch for running first processes
                if(mp.Name == _processNames.First().Name)
                    ReRunProcess(mp);

                var pList = Process.GetProcessesByName(mp.Name);

                // Check if a process is running
                if (pList?.Length > 0)
                {
                    // If single process running
                    if (pList.Length == 1)
                        continue;

                    WriteToFile($"Multiple process running: {mp.Name}");

                    string arg = @"/c taskkill /f";
                    foreach (var p in pList)
                        arg += " /pid " + p.Id;

                    try
                    {
                        ProcessStartInfo process = new ProcessStartInfo("cmd");
                        process.UseShellExecute = true;
                        process.CreateNoWindow = true;
                        process.Verb = "runas";
                        process.Arguments = arg;
                        Process.Start(process);
                    }
                    catch (Exception e)
                    {
                        WriteToFile($"Error occured while killing process: {mp.Name}, Error: {e.InnerException}");
                    }

                }
                else
                    WriteToFile($"Process not running: {mp.Name}");


                ReRunProcess(mp);

            }
        }

        private bool TryRunningProcess(string processName)
        {
            string filePath = string.Format($"{AppDomain.CurrentDomain.BaseDirectory}\\Logs\\{_retryLogFilePrefix}{DateTime.Now.Date.ToShortDateString().Replace('/', '_')}.txt");
            if (!Directory.Exists(_logPath) || !File.Exists(filePath))
                return true;

            var fileText = File.ReadAllText(filePath);
            var processLogsList = fileText.Split(new string[] { "||" }, StringSplitOptions.None);
            bool canRetry = true;
            for (int i = 0; i < processLogsList.Length; i++)
            {
                var retryLogs = processLogsList[i].Split('|');
                if (processName == retryLogs[0])
                {
                    var pRetryCount = int.Parse(retryLogs[1]);
                    var pInitialRetryStartHour = int.Parse(retryLogs[2]);

                    if (DateTime.Now.Hour <= (pInitialRetryStartHour + _maxRetryHours) && pRetryCount > _maxRetryCount)
                        canRetry = false;

                    break;
                }
            }

            return canRetry;
        }

        private void LogFailureAttemptsToFile(string processName)
        {
            string processLog = string.Format($"{processName}|1|{DateTime.Now.Hour}");
            if (!Directory.Exists(_logPath))
                Directory.CreateDirectory(_logPath);

            string filePath = string.Format($"{AppDomain.CurrentDomain.BaseDirectory}\\Logs\\{_retryLogFilePrefix}{DateTime.Now.Date.ToShortDateString().Replace('/', '_')}.txt");
            if (!File.Exists(filePath))
            {
                using (StreamWriter sw = File.CreateText(filePath))
                    sw.WriteLine(processLog);
            }
            else
            {
                var fileText = File.ReadAllText(filePath);
                var processLogsList = fileText.Split(new string[] { "||" }, StringSplitOptions.None);
                bool processFoundInList = false;
                for (int i = 0; i < processLogsList.Length; i++)
                {
                    var retryLogs = processLogsList[i].Split('|');
                    if (processName == retryLogs[0])
                    {
                        var pRetryCount = int.Parse(retryLogs[1]);
                        var pInitialRetryStartHour = int.Parse(retryLogs[2]);

                        if (pRetryCount > _maxRetryCount)
                            processLogsList[i] = string.Format($"{processName}|1|{DateTime.Now.Hour}");
                        else
                            processLogsList[i] = string.Format($"{processName}|{pRetryCount + 1}|{pInitialRetryStartHour}");

                        processFoundInList = true;
                        break;
                    }
                }

                var newList = processLogsList.ToList();

                if (!processFoundInList)
                    newList.Add(string.Format($"{processName}|1|{DateTime.Now.Hour}"));

                File.WriteAllText(filePath, string.Join("||", newList));
            }

        }

        private void WriteToFile(string Message, string fileNamePrefix = null)
        {
            if (string.IsNullOrWhiteSpace(fileNamePrefix))
                fileNamePrefix = _errorLogFilePrefix;

            if (!Directory.Exists(_logPath))
                Directory.CreateDirectory(_logPath);

            string filePath = string.Format($"{AppDomain.CurrentDomain.BaseDirectory}\\Logs\\{fileNamePrefix}{DateTime.Now.Date.ToShortDateString().Replace('/', '_')}.txt");
            if (!File.Exists(filePath))
            {
                // Create a file to write to.   
                using (StreamWriter sw = File.CreateText(filePath))
                    sw.WriteLine(Message);
            }
            else
            {
                using (StreamWriter sw = File.AppendText(filePath))
                    sw.WriteLine(Message);
            }
        }

        private void ReRunProcess(MyProcess mp)
        {
            // Check if process has been tried starting for more than number of counts in past few hours.
            // If so then don't try starting the process.
            if (TryRunningProcess(mp.Name))
            {
                WriteToFile($"Trying to start process : {mp.Name}");
                var process = Process.Start(mp.ExePath);
                if (process.HasExited)
                {
                    LogFailureAttemptsToFile(mp.Name);
                    WriteToFile($"Unable to start process : {mp.Name}");
                }
            }
        }


        #endregion
    }
}
